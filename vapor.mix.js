// Create a file inside Sources/App with a #mix() Leaf tag
// that you can use to load the generated files from webpack

const path = require('path');
const fs = require('fs');

const template = `// autogenerated at {{timestamp}} by: npm run dev
// use app.leaf.tags["mix"] = LaravelMixLeafTag()
// or app.registerLaravelMix()
// in configure.swift
// then you can use 
// <link href='#mix("/css/app.css")' rel='stylesheet'>
// <script src='#mix("/js/app.js")' defer></script>
// in your leaf templates

import Vapor
import Leaf

public struct LaravelMixAssets {
    // probably the version should be md5 of the mix-manifest.json
    // and be reloaded every new build on each request or not?
    // this is to avoid rebuilding the server on js file changes
    // maybe using https://github.com/cespare/reflex to reload
    // the server each time a swift file is modified. 
    // but on testing maybe is not super necesary.
    
    public static var version: String = "{{timestamp}}"
    public static var files: [String: String] = [{{mix}}
    ]
    
    public static func get(_ file:String) -> String? {
        return LaravelMixAssets.files[file]
    }
}

struct LaravelMixLeafTagError: Error {}

public struct LaravelMixLeafTag: LeafTag {
    
    public init() {}
    
    public func render(_ ctx: LeafContext) throws -> LeafData {
        
        if (ctx.parameters.count <= 0) {
            throw LaravelMixLeafTagError()
        }

        guard let file = ctx.parameters[0].string else {
                throw LaravelMixLeafTagError()
        }

        return LeafData.string(LaravelMixAssets.files[file])
    }
}

extension Application {
    
    public func registerLaravelMix() {
        self.leaf.tags["mix"] = LaravelMixLeafTag()
    }
}
`

module.exports = async (filename = null) => {

    if (!filename) {
        filename = "Sources/App/mix.swift"
    }

    filename = path.resolve(__dirname, filename)

    const manifest = require(
        path.resolve(
            __dirname,
            "Public/mix-manifest.json"
        )
    );
  
    let items = ''
    const keys = Object.keys(manifest);
    keys.forEach(key => {
        items += `
        "${key}": "${manifest[key]}",`
    });

    const now = (new Date()).toISOString()
    const out = template.replace(
        /{{mix}}/g,
        items)
        .replace(
        /{{timestamp}}/g,
        now
    )

    fs.writeFileSync(filename, out)
}